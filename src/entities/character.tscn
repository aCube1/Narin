[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

onready var CoyoteTimer := $CoyoteTimer

export var _direction := Vector2.ZERO setget set_direction

const SNAP_VECTOR := Vector2.DOWN * 8.0

var is_on_ground := true
var is_jumping := false

# Horizontal Movement
var _acceleration := 700
var _stop_friction := 24.0 # Stop walking friction
var _friction := 48.0 # Change direction friction
var _velocity := Vector2.ZERO
var _max_speed: float

# Vertical Movement
var _time_to_jump_peak := 0.3
var _jump_height := 64
var _jump_distance := 210
var _air_friction := 8.0
var _can_jump := false
var _jump_force: float
var _gravity: float

var _current_snap := SNAP_VECTOR
var _last_direction := Vector2.ZERO

func _ready() -> void:
	_gravity = (2.0 * _jump_height) / pow(_time_to_jump_peak, 2)
	_jump_force = _gravity * _time_to_jump_peak
	_max_speed = _jump_distance / (_time_to_jump_peak * 2.0)

func _physics_process(delta: float) -> void:
	move(delta)
	jump()

	_velocity.y += _gravity * delta
	_current_snap = SNAP_VECTOR if not is_jumping else Vector2.ZERO
	_velocity = move_and_slide_with_snap(_velocity, _current_snap, Vector2.UP)

func _on_CoyoteTimer_timeout() -> void:
	_can_jump = false

func jump() -> void:
	is_on_ground = is_on_floor()

	if (not is_on_floor() or not is_jumping) and CoyoteTimer.is_stopped():
		CoyoteTimer.start()
	
	if _direction.y == -1 and _can_jump:
		_velocity.y = -_jump_force
		is_jumping = true

	if _direction.y == 0:
		if is_on_ground:
			is_jumping = false
			_can_jump = true
		elif is_jumping and _velocity.y < 0.0:
			_velocity.y -= _velocity.y / 2

func move(delta: float) -> void:
	_direction.x = clamp(_direction.x, -1, 1)
	_direction.y = clamp(_direction.y, -1, 1)

	if _direction.x != 0:
		_velocity.x += _acceleration * _direction.x * delta
		_velocity.x = clamp(_velocity.x, -_max_speed, _max_speed)
		if _last_direction.x != _direction.x:
			_velocity.x = int(lerp(_velocity.x, 0, _friction * delta))

	if is_on_ground:
		if _direction.x == 0:
			_velocity.x = int(lerp(_velocity.x, 0, _stop_friction * delta))
	else:
		if _direction.x == 0:
			_velocity.x = int(lerp(_velocity.x, 0, _air_friction * delta))

	_last_direction.x = _direction.x if _direction.x != 0 else _last_direction.x
	_direction.x = 0

func set_direction(value: Vector2) -> void:
	_direction = value
"

[node name="Character" type="KinematicBody2D"]
script = SubResource( 1 )

[node name="CoyoteTimer" type="Timer" parent="."]
wait_time = 0.2
one_shot = true

[connection signal="timeout" from="CoyoteTimer" to="." method="_on_CoyoteTimer_timeout"]
